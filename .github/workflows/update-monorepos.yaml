name: Update Monorepos Dependency

on:
  release:
    types: [published, released]

  workflow_dispatch:
    inputs:
      package:
        description: "Package to update"
        required: true
        default: "@sibipro/checkout-link"

permissions:
  contents: write
  pull-requests: write

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.find.outputs.repos }}
    steps:
      - name: Download this release to tmp
        uses: actions/download-artifact@v4
        with:
          name: package-files
          path: package.json

      - name: Get package name and version
        id: vars
        run: |
          echo "package=$(jq -r '.name' package.json)" >> "$GITHUB_OUTPUT"
          echo "version=$(jq -r '.version' package.json)" >> "$GITHUB_OUTPUT"

      - name: Delete tmp package.json
        run: rm package.json

      - name: Set up GitHub CLI
        uses: actions/setup-node@v4

      - name: Discover dependent repos
        id: find
        run: |
          REPOS_JSON=$(gh api search/code \
           --method GET \
           -f q='org:sibipro "${{ inputs.package}}" in:file filename:package.json' \
           --jq '[.items[].repository.full_name | select(. != "${{ github.repository }}")] | unique | sort')
          echo "Debug - Found repos: $REPOS_JSON"
          echo "repos=$REPOS_JSON" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

  update-deps:
    needs: discover
    runs-on: blacksmith-4vcpu-ubuntu-2204-arm
    strategy:
      matrix:
        repo: ${{ fromJson(needs.discover.outputs.repos) }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repo }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4

      - name: Install latest corepack
        run: npm install --global corepack@latest

      - name: Enable Corepack
        run: corepack enable

      # PNPM update step (runs only if a pnpm-lock.yaml is found)
      - name: Update Dependency with pnpm
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        run: |
          echo "Detected pnpm-lock.yaml; updating ${{ steps.vars.outputs.package }} to ${{ steps.vars.outputs.version }} via pnpm."
          pnpm update -r "${{ steps.vars.outputs.package }}@${{ steps.vars.outputs.version }}" --prod

      # Yarn update step (runs only if a yarn.lock is found)
      - name: Update Dependency with yarn
        if: ${{ hashFiles('yarn.lock') != '' }}
        run: |
          echo "Detected yarn.lock; updating ${{ steps.vars.outputs.package }} to ${{ steps.vars.outputs.version }} via yarn."
          yarn
          yarn update "${{ steps.vars.outputs.package }}@${{ steps.vars.outputs.version }}"

      # NPM update step (runs only if a package-lock.json is found)
      - name: Update Dependency with npm
        if: ${{ hashFiles('package-lock.json') != '' }}
        run: |
          echo "Detected package-lock.json; updating ${{ steps.vars.outputs.package }} to ${{ steps.vars.outputs.version }} via npm."
          npm ci
          npm update "${{ steps.vars.outputs.package }}@${{ steps.vars.outputs.version }}"

      # Fallback: no recognized lockfiles => default to npm
      - name: Fallback (no lockfile)
        if: ${{ hashFiles('pnpm-lock.yaml') == '' && hashFiles('yarn.lock') == '' && hashFiles('package-lock.json') == '' }}
        run: |
          echo "No pnpm, yarn, or npm lockfile found; updating via npm."
          npm update "${{ steps.vars.outputs.package }}@${{ steps.vars.outputs.version }}"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.PAT_TOKEN }}
          draft: false
          branch: "bump/${{ steps.vars.outputs.package }}/${{ steps.vars.outputs.version }}"
          title: "bump ${{ steps.vars.outputs.package }} to ${{ steps.vars.outputs.version }}"
          body: |
            Automatically updating ${{ steps.vars.outputs.package }} in `${{ matrix.repo }}` to version ${{ steps.vars.outputs.version }}.
            The repo for this package is: ${{ github.repositoryUrl }}.

            Release Notes: ${{ github.event.release.html_url || '' }}
          labels: "dependencies, automation"
          add-paths: .
